---
import Container from '../wrapper/container.astro'

const faqs: {
  title: string
  description: string
}[] = [
  {
    title: `Where do I report bugs?`,
    description: `Report via <a class="underline" target="_blank" href="https://github.com/MengLinMaker/Grocermatic/issues/new?assignees=MengLinMaker&labels=bug&template=bug_report.md">GitHub</a>. You will find the source code along with any documentation.`,
  },
  {
    title: `Which stores do you compare?`,
    description: `As to date, Aldi, Coles IGA and Woolworths are compared. This accounts for roughly 75% of the grocery market in Australia.`,
  },
  {
    title: `Why can't I find fruits and vegetables from Aldi`,
    description: `Aldi does not provide prices online unforunately. The alternative solution is to crowd source information, which is not very practical.`,
  },
  {
    title: `Why can't I find pet food?`,
    description: `There are both technical and non technical reasons for not including pet food:
			<ul style="list-style: inside;">
				<li>Firstly, not including pet food will prevent less literate users from accidentally eating pet food.</li>
				<li>Secondly, focusing only on human food provides less maintenance overhead, allowing more focus on developing specialised features. For example, pet food would require categorising the type of pet food, which is not applicable to human food.</li>
			</ul>`,
  },
  {
    title: `Why are 'each' priced items missing?`,
    description: `The ability to compare the value ($/kg) of each grocery is key to reducing cost. So items without a defined quantity are removed, which happens to include many iterms with 'each' based pricing.`,
  },
]
---

<Container class="mx-auto flex flex-col px-6 py-16 divide-y divide-neutral-light">
  <h2 class="text-xl font-bold pb-4">Frequently asked questions</h2>
  {
    faqs.map((faq) => (
      <dl class="accordion py-4 text-left flex flex-col">
        <dt class="flex w-full justify-between">
          <span class="font-bold">{faq.title}</span>
          <div class="accordian-icon block">
            <svg class="h-6 w-6 stroke-neutral-dark" viewBox="0 0 24 24" stroke-width="1.5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 6v12m6-6H6" />
            </svg>
          </div>
          <div class="accordian-icon hidden">
            <svg class="h-6 w-6 stroke-neutral-dark" viewBox="0 0 24 24" stroke-width="1.5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M18 12H6" />
            </svg>
          </div>
        </dt>
        <dd class="accordian-content grid-rows-[0fr] mt-0 grid pr-12 transition-all">
          <span class="text-base overflow-hidden leading-relaxed" set:html={faq.description} />
        </dd>
      </dl>
    ))
  }
  <div class="h-[1px] bg-neutral-light"></div>
</Container>

<script>
  const toggleClass = (e: Element, class1: string, class2: string) => {
    const classList = e.classList.value.split(' ')
    const indexClass1 = classList.indexOf(class1)
    const indexClass2 = classList.indexOf(class2)
    if (indexClass1 >= 0) classList[indexClass1] = class2
    else if (indexClass2 >= 0) classList[indexClass2] = class1
    else console.error(`Classes don't exist: '${class1}', '${class2}' in element`, e)
    e.className = classList.join(' ')
  }
  const toggleAccordianIcons = (e: Element) => toggleClass(e, 'hidden', 'block')
  const toggleAccordianContent = (e: Element) => {
    toggleClass(e, 'grid-rows-[0fr]', 'grid-rows-[1fr]')
    toggleClass(e, 'mt-0', 'mt-4')
  }
  for (const accordianBtn of document.getElementsByClassName('accordion')) {
    const accordianIcons = accordianBtn.getElementsByClassName('accordian-icon')
    const accordianContent = accordianBtn.getElementsByClassName('accordian-content')[0]!
    accordianBtn.addEventListener('click', () => {
      toggleAccordianIcons(accordianIcons[0]!)
      toggleAccordianIcons(accordianIcons[1]!)
      toggleAccordianContent(accordianContent)
    })
  }
</script>
